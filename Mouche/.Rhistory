shiny::runApp()
runApp()
faithful
view(faithfull)
view(faithful)
head(faithfull)
runApp()
data(drosophilia)
data(drosophilia)
droso<-data(drosophilia)
droso<-data(drosophilia)
install.packages(ARTIVA)
install.packages("ARTIVA")
library(ARTIVA)
library(ARTIVA)
droso<-data(drosophilia)
library(ARTIVA)
library("ARTIVA")
drosophila
droso<-drosophila
View(droso)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$loinorm <- renderPlot({
# generate bins based on input$bins from ui.R
hist(rnorm(input$Nb))
})
}
library(shiny)
ui <- fluidPage(
titlePanel("TD enculage de mouches"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("Nb",
"Nombre de valeurs :",
min = 1,
max = 200,
value = 30),
# Show a plot of the generated distribution
mainPanel(
plotOutput("loinorm"),
)
)
))
# Define server logic required to draw a histogram
server <- function(input, output) {
output$loinorm <- renderPlot({
# generate bins based on input$bins from ui.R
hist(rnorm(input$Nb))
})
}
# Run the application
shinyApp(ui = ui, server = server)
hist(rnorm(input$Nb))
hist(rnorm(30))
setwd("C:/Users/basti/Desktop/GIT/elevage/Mouche")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
